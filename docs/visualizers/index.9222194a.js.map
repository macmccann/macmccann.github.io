{"mappings":"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","sources":["<anon>","main.js","colorThemes.js","options.js","visualizer.ts","audioLevels.ts","audioProcessor.ts","fft.ts","renderFuncs.js"],"sourcesContent":["const $a0b14f8ed607a5d3$var$setThemeSideEffect = (newTheme)=>{\n    document.documentElement.setAttribute(\"data-theme\", newTheme);\n    document.getElementById(\"colorThemeSelect\").value = newTheme;\n};\nconst $a0b14f8ed607a5d3$var$setVisualizerSideEffect = (newVisualizer)=>{\n    document.getElementById(\"modeSelect\").value = newVisualizer;\n};\nclass $a0b14f8ed607a5d3$export$2e2bcd8739ae039 {\n    static init() {\n        this.opts = {\n            theme: \"foam\",\n            visualizer: \"line\"\n        };\n        this.sideEffects = (key)=>{\n            if (key === \"theme\") $a0b14f8ed607a5d3$var$setThemeSideEffect(this.opts.theme);\n            if (key === \"visualizer\") $a0b14f8ed607a5d3$var$setVisualizerSideEffect(this.opts.visualizer);\n        };\n        for(const key in this.opts)if (localStorage.getItem(key) != null) {\n            this.opts[key] = localStorage.getItem(key);\n            this.sideEffects(key);\n        }\n    }\n    static getOption(key) {\n        return this.opts[key];\n    }\n    static setOption(key, value) {\n        this.opts[key] = value;\n        localStorage.setItem(key, value);\n    }\n}\n(()=>{\n    $a0b14f8ed607a5d3$export$2e2bcd8739ae039.init();\n})();\n\n\nconst $d386376756af05a9$var$COLOR_THEMES = {\n    foam: {\n        primary: \"#abffca\",\n        secondary: \"#000000\"\n    },\n    fire: {\n        primary: \"#ff0000\",\n        secondary: \"#000000\"\n    },\n    bubblegum: {\n        primary: \"#ffffff\",\n        secondary: \"#ffa1ee\"\n    },\n    galaxy: {\n        primary: \"#e8daed\",\n        secondary: \"#755b7d\"\n    }\n};\nclass $d386376756af05a9$var$ColorThemes {\n    static getTheme() {\n        return $d386376756af05a9$var$COLOR_THEMES[(0, $a0b14f8ed607a5d3$export$2e2bcd8739ae039).getOption(\"theme\")];\n    }\n    static setTheme(newTheme) {\n        (0, $a0b14f8ed607a5d3$export$2e2bcd8739ae039).setOption(\"theme\", newTheme);\n        document.documentElement.setAttribute(\"data-theme\", newTheme);\n        document.getElementById(\"colorThemeSelect\").value = newTheme;\n    }\n}\nvar $d386376756af05a9$export$2e2bcd8739ae039 = $d386376756af05a9$var$ColorThemes;\n\n\n\nclass $cdedeb5c34a2f031$export$2e2bcd8739ae039 {\n    constructor(audio){\n        this.audio = audio;\n        let sampleRate;\n        if (this.audio.audioContext) sampleRate = this.audio.audioContext.sampleRate;\n        else sampleRate = 44100;\n        const bucketHz = sampleRate / this.audio.fftSize;\n        const bassLow = Math.clamp(Math.round(20 / bucketHz) - 1, 0, this.audio.numSamps - 1);\n        const bassHigh = Math.clamp(Math.round(320 / bucketHz) - 1, 0, this.audio.numSamps - 1);\n        const midHigh = Math.clamp(Math.round(2800 / bucketHz) - 1, 0, this.audio.numSamps - 1);\n        const trebHigh = Math.clamp(Math.round(11025 / bucketHz) - 1, 0, this.audio.numSamps - 1);\n        this.starts = [\n            bassLow,\n            bassHigh,\n            midHigh\n        ];\n        this.stops = [\n            bassHigh,\n            midHigh,\n            trebHigh\n        ];\n        this.val = new Float32Array(3);\n        this.imm = new Float32Array(3);\n        this.att = new Float32Array(3);\n        this.avg = new Float32Array(3);\n        this.longAvg = new Float32Array(3);\n        this.att.fill(1);\n        this.avg.fill(1);\n        this.longAvg.fill(1);\n    }\n    /* eslint-disable camelcase */ get bass() {\n        return this.val[0];\n    }\n    get bass_att() {\n        return this.att[0];\n    }\n    get mid() {\n        return this.val[1];\n    }\n    get mid_att() {\n        return this.att[1];\n    }\n    get treb() {\n        return this.val[2];\n    }\n    get treb_att() {\n        return this.att[2];\n    }\n    /* eslint-enable camelcase */ static isFiniteNumber(num) {\n        return Number.isFinite(num) && !Number.isNaN(num);\n    }\n    // static adjustRateToFPS(rate, baseFPS, FPS) {\n    //     return rate ** (baseFPS / FPS);\n    // }\n    updateAudioLevels() {\n        if (this.audio.freqArray.length > 0) {\n            // let effectiveFPS = fps;\n            // if (\n            //     !AudioLevels.isFiniteNumber(effectiveFPS) ||\n            //     effectiveFPS < 15\n            // ) {\n            //     effectiveFPS = 15;\n            // } else if (effectiveFPS > 144) {\n            //     effectiveFPS = 144;\n            // }\n            // Clear for next loop\n            this.imm.fill(0);\n            for(let i = 0; i < 3; i++)for(let j = this.starts[i]; j < this.stops[i]; j++)this.imm[i] += this.audio.freqArray[j];\n            for(let i = 0; i < 3; i++){\n                let rate;\n                if (this.imm[i] > this.avg[i]) rate = 0.2;\n                else rate = 0.5;\n                // rate = AudioLevels.adjustRateToFPS(rate, 30.0, effectiveFPS);\n                this.avg[i] = this.avg[i] * rate + this.imm[i] * (1 - rate);\n                // if (frame < 50) {\n                //     rate = 0.9;\n                // } else {\n                rate = 0.992;\n                // }\n                // rate = AudioLevels.adjustRateToFPS(rate, 30.0, effectiveFPS);\n                this.longAvg[i] = this.longAvg[i] * rate + this.imm[i] * (1 - rate);\n                if (this.longAvg[i] < 0.001) {\n                    this.val[i] = 1.0;\n                    this.att[i] = 1.0;\n                } else {\n                    this.val[i] = this.imm[i] / this.longAvg[i];\n                    this.att[i] = this.avg[i] / this.longAvg[i];\n                }\n            }\n        }\n    }\n}\n\n\nclass $2485b1ca739b5b31$export$2e2bcd8739ae039 {\n    constructor(samplesIn, samplesOut, equalize = false){\n        this.equalizeArr = null;\n        this.samplesIn = samplesIn;\n        this.samplesOut = samplesOut;\n        this.equalize = equalize;\n        this.NFREQ = samplesOut * 2;\n        if (this.equalize) this.initEqualizeTable();\n        this.bitrevtable = new Uint16Array(this.NFREQ);\n        this.cossintable = [\n            new Float32Array(0),\n            new Float32Array(0)\n        ];\n        this.initBitRevTable();\n        this.initCosSinTable();\n    }\n    initEqualizeTable() {\n        this.equalizeArr = new Float32Array(this.samplesOut);\n        const invHalfNFREQ = 1.0 / this.samplesOut;\n        for(let i = 0; i < this.samplesOut; i++)this.equalizeArr[i] = -0.02 * Math.log((this.samplesOut - i) * invHalfNFREQ);\n    }\n    /* eslint-disable no-bitwise */ initBitRevTable() {\n        for(let i = 0; i < this.NFREQ; i++)this.bitrevtable[i] = i;\n        let j = 0;\n        for(let i = 0; i < this.NFREQ; i++){\n            if (j > i) {\n                const temp = this.bitrevtable[i];\n                this.bitrevtable[i] = this.bitrevtable[j];\n                this.bitrevtable[j] = temp;\n            }\n            let m = this.NFREQ >> 1;\n            while(m >= 1 && j >= m){\n                j -= m;\n                m >>= 1;\n            }\n            j += m;\n        }\n    }\n    initCosSinTable() {\n        let dftsize = 2;\n        let tabsize = 0;\n        while(dftsize <= this.NFREQ){\n            tabsize += 1;\n            dftsize <<= 1;\n        }\n        this.cossintable = [\n            new Float32Array(tabsize),\n            new Float32Array(tabsize)\n        ];\n        dftsize = 2;\n        let i = 0;\n        while(dftsize <= this.NFREQ){\n            const theta = -2 * Math.PI / dftsize;\n            this.cossintable[0][i] = Math.cos(theta);\n            this.cossintable[1][i] = Math.sin(theta);\n            i += 1;\n            dftsize <<= 1;\n        }\n    }\n    timeToFrequencyDomain(waveDataIn) {\n        const real = new Float32Array(this.NFREQ);\n        const imag = new Float32Array(this.NFREQ);\n        for(let i = 0; i < this.NFREQ; i++){\n            const idx = this.bitrevtable[i];\n            if (idx < this.samplesIn) real[i] = waveDataIn[idx];\n            else real[i] = 0;\n            imag[i] = 0;\n        }\n        let dftsize = 2;\n        let t = 0;\n        while(dftsize <= this.NFREQ){\n            const wpr = this.cossintable[0][t];\n            const wpi = this.cossintable[1][t];\n            let wr = 1.0;\n            let wi = 0.0;\n            const hdftsize = dftsize >> 1;\n            for(let m = 0; m < hdftsize; m++){\n                for(let i = m; i < this.NFREQ; i += dftsize){\n                    const j = i + hdftsize;\n                    const tempr = wr * real[j] - wi * imag[j];\n                    const tempi = wr * imag[j] + wi * real[j];\n                    real[j] = real[i] - tempr;\n                    imag[j] = imag[i] - tempi;\n                    real[i] += tempr;\n                    imag[i] += tempi;\n                }\n                const wtemp = wr;\n                wr = wtemp * wpr - wi * wpi;\n                wi = wi * wpr + wtemp * wpi;\n            }\n            dftsize <<= 1;\n            t += 1;\n        }\n        const spectralDataOut = new Float32Array(this.samplesOut);\n        if (this.equalize && this.equalizeArr != null) for(let i = 0; i < this.samplesOut; i++)spectralDataOut[i] = this.equalizeArr[i] * Math.sqrt(real[i] * real[i] + imag[i] * imag[i]);\n        else for(let i = 0; i < this.samplesOut; i++)spectralDataOut[i] = Math.sqrt(real[i] * real[i] + imag[i] * imag[i]);\n        return spectralDataOut;\n    }\n}\n\n\nclass $d024f79b4df505bb$export$2e2bcd8739ae039 {\n    constructor(context){\n        this.numSamps = 512;\n        this.fftSize = this.numSamps * 2;\n        this.fft = new (0, $2485b1ca739b5b31$export$2e2bcd8739ae039)(this.fftSize, 512, true);\n        this.audioContext = context;\n        this.audible = context.createDelay();\n        this.analyser = context.createAnalyser();\n        this.analyser.smoothingTimeConstant = 0.0;\n        this.analyser.fftSize = this.fftSize;\n        this.audible.connect(this.analyser);\n        // Split channels\n        this.analyserL = context.createAnalyser();\n        this.analyserL.smoothingTimeConstant = 0.0;\n        this.analyserL.fftSize = this.fftSize;\n        this.analyserR = context.createAnalyser();\n        this.analyserR.smoothingTimeConstant = 0.0;\n        this.analyserR.fftSize = this.fftSize;\n        this.splitter = context.createChannelSplitter(2);\n        this.audible.connect(this.splitter);\n        this.splitter.connect(this.analyserL, 0);\n        this.splitter.connect(this.analyserR, 1);\n        // Initialised once as typed arrays\n        // Used for webaudio API raw (time domain) samples. 0 -> 255\n        this.timeByteArray = new Uint8Array(this.fftSize);\n        this.timeByteArrayL = new Uint8Array(this.fftSize);\n        this.timeByteArrayR = new Uint8Array(this.fftSize);\n        // Signed raw samples shifted to -128 -> 127\n        this.timeArray = new Int8Array(this.fftSize);\n        this.timeByteArraySignedL = new Int8Array(this.fftSize);\n        this.timeByteArraySignedR = new Int8Array(this.fftSize);\n        // Temporary array for smoothing\n        this.tempTimeArrayL = new Int8Array(this.fftSize);\n        this.tempTimeArrayR = new Int8Array(this.fftSize);\n        // Undersampled from this.fftSize to this.numSamps\n        this.timeArrayL = new Int8Array(this.numSamps);\n        this.timeArrayR = new Int8Array(this.numSamps);\n        // Frequency domain arrays\n        this.freqArray = new Float32Array(0);\n        this.freqArrayL = new Float32Array(0);\n        this.freqArrayR = new Float32Array(0);\n    }\n    sampleAudio() {\n        this.analyser.getByteTimeDomainData(this.timeByteArray);\n        this.analyserL.getByteTimeDomainData(this.timeByteArrayL);\n        this.analyserR.getByteTimeDomainData(this.timeByteArrayR);\n        this.processAudio();\n    }\n    updateAudio(timeByteArray, timeByteArrayL, timeByteArrayR) {\n        this.timeByteArray.set(timeByteArray);\n        this.timeByteArrayL.set(timeByteArrayL);\n        this.timeByteArrayR.set(timeByteArrayR);\n        this.processAudio();\n    }\n    /* eslint-disable no-bitwise */ processAudio() {\n        for(let i = 0, j = 0, lastIdx = 0; i < this.fftSize; i++){\n            // Shift Unsigned to Signed about 0\n            this.timeArray[i] = this.timeByteArray[i] - 128;\n            this.timeByteArraySignedL[i] = this.timeByteArrayL[i] - 128;\n            this.timeByteArraySignedR[i] = this.timeByteArrayR[i] - 128;\n            this.tempTimeArrayL[i] = 0.5 * (this.timeByteArraySignedL[i] + this.timeByteArraySignedL[lastIdx]);\n            this.tempTimeArrayR[i] = 0.5 * (this.timeByteArraySignedR[i] + this.timeByteArraySignedR[lastIdx]);\n            // Undersampled\n            if (i % 2 === 0) {\n                this.timeArrayL[j] = this.tempTimeArrayL[i];\n                this.timeArrayR[j] = this.tempTimeArrayR[i];\n                j += 1;\n            }\n            lastIdx = i;\n        }\n        // Use full width samples for the FFT\n        this.freqArray = this.fft.timeToFrequencyDomain(this.timeArray);\n        this.freqArrayL = this.fft.timeToFrequencyDomain(this.timeByteArraySignedL);\n        this.freqArrayR = this.fft.timeToFrequencyDomain(this.timeByteArraySignedR);\n    }\n    connectAudio(audioNode) {\n        audioNode.connect(this.audible);\n    }\n    disconnectAudio(audioNode) {\n        audioNode.disconnect(this.audible);\n    }\n}\n\n\n\nconst $586b4cff3053a98e$export$b8e290f5e3570bd8 = {\n    bars: (audio, canvas, ctx)=>{\n        const data = audio.freqArrayL;\n        const canvasWidth = canvas.width;\n        const canvasHeight = canvas.height;\n        const numBars = data.length;\n        // Calculate logarithmic positions for each bar\n        let totalLog = 0;\n        const logWidths = [];\n        let cumulativeWidth = 0;\n        for(let i = 0; i < numBars; i++)if (i === 0) {\n            logWidths.push(1);\n            totalLog += 1;\n        } else {\n            const logWidth = Math.log10(i + 1) - Math.log10(i);\n            logWidths.push(logWidth);\n            totalLog += logWidth;\n        }\n        // Draw each bar with logarithmically adjusted widths\n        for(let i = 0; i < numBars; i++){\n            const logWidth = logWidths[i] / totalLog * canvasWidth;\n            const barHeight = data[i] * canvasHeight / 20;\n            ctx.fillStyle = (0, $d386376756af05a9$export$2e2bcd8739ae039).getTheme().primary;\n            ctx.fillRect(cumulativeWidth, canvasHeight - barHeight, logWidth, barHeight);\n            cumulativeWidth += logWidth;\n        }\n    },\n    line: (audio, canvas, ctx)=>{\n        const data = audio.freqArray.map((val)=>{\n            return Math.log10(val + 1);\n        });\n        const canvasWidth = canvas.width;\n        const canvasHeight = canvas.height;\n        const numBars = data.length;\n        // Clear the canvas\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        // Calculate logarithmic positions for each bar\n        let totalLog = 0;\n        const logWidths = [];\n        for(let i = 0; i < numBars; i++)if (i === 0) {\n            logWidths.push(1);\n            totalLog += 1;\n        } else {\n            const logWidth = Math.log10(i + 1) - Math.log10(i);\n            logWidths.push(logWidth);\n            totalLog += logWidth;\n        }\n        let cumulativeWidth = 0;\n        ctx.beginPath();\n        for(let i = 0; i < numBars; i++){\n            const logWidth = logWidths[i] / totalLog * canvasWidth;\n            const x = cumulativeWidth + logWidth / 2;\n            const y = canvasHeight - data[i] * canvasHeight / 2;\n            if (i === 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n            cumulativeWidth += logWidth;\n        }\n        ctx.strokeStyle = (0, $d386376756af05a9$export$2e2bcd8739ae039).getTheme().primary;\n        ctx.lineWidth = 2;\n        ctx.stroke();\n    }\n};\n\n\n\nclass $5c86a12c98a1c270$export$2e2bcd8739ae039 {\n    constructor(audioContext){\n        this.audioNode = null;\n        this.audio = new (0, $d024f79b4df505bb$export$2e2bcd8739ae039)(audioContext);\n        this.audioLevels = new (0, $cdedeb5c34a2f031$export$2e2bcd8739ae039)(this.audio);\n        // Get the canvas element and its context\n        this.canvas = document.getElementById(\"volumeBarCanvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n    render() {\n        this.audio.sampleAudio();\n        this.audioLevels.updateAudioLevels();\n        this.renderWebGL();\n    }\n    connectAudio(audioNode) {\n        this.audioNode = audioNode;\n        this.audio.connectAudio(audioNode);\n    }\n    disconnectAudio(audioNode) {\n        this.audioNode = null;\n        this.audio.disconnectAudio(audioNode);\n    }\n    renderWebGL() {\n        // Clear the canvas\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        const renderFunc = (0, $586b4cff3053a98e$export$b8e290f5e3570bd8)[(0, $a0b14f8ed607a5d3$export$2e2bcd8739ae039).getOption(\"visualizer\")];\n        renderFunc(this.audio, this.canvas, this.ctx);\n    }\n}\n\n\ndocument.getElementById(\"audioFileInput\").addEventListener(\"change\", $efd3ba4ec2608b1d$var$handleFileSelect, false);\nlet $efd3ba4ec2608b1d$var$audioContext, $efd3ba4ec2608b1d$var$analyser, $efd3ba4ec2608b1d$var$source, $efd3ba4ec2608b1d$var$bufferLength, $efd3ba4ec2608b1d$var$canvas, $efd3ba4ec2608b1d$var$gl, $efd3ba4ec2608b1d$var$program, $efd3ba4ec2608b1d$var$buffer, $efd3ba4ec2608b1d$var$visualizer;\nlet $efd3ba4ec2608b1d$var$ended = false;\nconst $efd3ba4ec2608b1d$var$RAMP_LENGTH_UP_SECONDS = 0.1;\nconst $efd3ba4ec2608b1d$var$RAMP_LENGTH_DOWN_SECONDS = 1;\nconst $efd3ba4ec2608b1d$var$PEAK_RAMP_LENGTH_DOWN_SECONDS = 1;\nconst $efd3ba4ec2608b1d$var$STEP_EPSILON = 0.0001;\nconst $efd3ba4ec2608b1d$var$HOLD_DECAY = 0.01;\nconst $efd3ba4ec2608b1d$var$HOLD_HEIGHT = 0.008;\nconst $efd3ba4ec2608b1d$var$PEAK_HOLD_DECAY_MS = 1000;\nfunction $efd3ba4ec2608b1d$var$handleFileSelect(event) {\n    const file = event.target.files[0];\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = function(e) {\n            $efd3ba4ec2608b1d$var$initAudio(e.target.result);\n        };\n        reader.readAsArrayBuffer(file);\n    }\n}\nfunction $efd3ba4ec2608b1d$var$initAudio(audioData) {\n    $efd3ba4ec2608b1d$var$audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const FFT_SIZE = 4096;\n    $efd3ba4ec2608b1d$var$analyser = $efd3ba4ec2608b1d$var$audioContext.createAnalyser();\n    $efd3ba4ec2608b1d$var$analyser.fftSize = FFT_SIZE;\n    $efd3ba4ec2608b1d$var$bufferLength = $efd3ba4ec2608b1d$var$analyser.frequencyBinCount;\n    dataArray = new Uint8Array($efd3ba4ec2608b1d$var$bufferLength);\n    $efd3ba4ec2608b1d$var$analyser.minDecibels = -90;\n    $efd3ba4ec2608b1d$var$analyser.maxDecibels = 0;\n    $efd3ba4ec2608b1d$var$analyser.smoothingTimeConstant = 0.0;\n    $efd3ba4ec2608b1d$var$audioContext.decodeAudioData(audioData, function(buffer) {\n        $efd3ba4ec2608b1d$var$source = $efd3ba4ec2608b1d$var$audioContext.createBufferSource();\n        $efd3ba4ec2608b1d$var$source.buffer = buffer;\n        $efd3ba4ec2608b1d$var$source.connect($efd3ba4ec2608b1d$var$analyser);\n        $efd3ba4ec2608b1d$var$source.onended = ()=>{\n            $efd3ba4ec2608b1d$var$ended = true;\n        };\n        $efd3ba4ec2608b1d$var$visualizer = new (0, $5c86a12c98a1c270$export$2e2bcd8739ae039)($efd3ba4ec2608b1d$var$audioContext);\n        $efd3ba4ec2608b1d$var$visualizer.connectAudio($efd3ba4ec2608b1d$var$analyser);\n        $efd3ba4ec2608b1d$var$analyser.connect($efd3ba4ec2608b1d$var$audioContext.destination);\n        $efd3ba4ec2608b1d$var$source.start();\n        // initWebGL();\n        $efd3ba4ec2608b1d$var$startRenderer();\n    });\n}\nfunction $efd3ba4ec2608b1d$var$initWebGL() {\n    $efd3ba4ec2608b1d$var$canvas = document.getElementById(\"volumeBarCanvas\");\n    $efd3ba4ec2608b1d$var$gl = $efd3ba4ec2608b1d$var$canvas.getContext(\"webgl\");\n    const vertexShaderSource = `\n        attribute vec2 a_position;\n        attribute float a_barType;\n        varying float v_barType;\n        void main() {\n            gl_Position = vec4(a_position, 0, 1);\n            v_barType = a_barType;\n        }\n    `;\n    const fragmentShaderSource = `\n        precision mediump float;\n        uniform float u_volume;\n        uniform float u_rms;\n        uniform float u_hold;\n        varying float v_barType;\n        void main() {\n            if (v_barType == 0.0) {\n                gl_FragColor = vec4(0.384, 0.530, 0.216, 1.0);\n            } else {\n                gl_FragColor = vec4(0.454, 0.98, 0.239, 1.0);\n            }\n        }\n    `;\n    const vertexShader = $efd3ba4ec2608b1d$var$createShader($efd3ba4ec2608b1d$var$gl, $efd3ba4ec2608b1d$var$gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = $efd3ba4ec2608b1d$var$createShader($efd3ba4ec2608b1d$var$gl, $efd3ba4ec2608b1d$var$gl.FRAGMENT_SHADER, fragmentShaderSource);\n    $efd3ba4ec2608b1d$var$program = $efd3ba4ec2608b1d$var$createProgram($efd3ba4ec2608b1d$var$gl, vertexShader, fragmentShader);\n    $efd3ba4ec2608b1d$var$gl.useProgram($efd3ba4ec2608b1d$var$program);\n    const positionLocation = $efd3ba4ec2608b1d$var$gl.getAttribLocation($efd3ba4ec2608b1d$var$program, \"a_position\");\n    const barTypeLocation = $efd3ba4ec2608b1d$var$gl.getAttribLocation($efd3ba4ec2608b1d$var$program, \"a_barType\");\n    $efd3ba4ec2608b1d$var$buffer = $efd3ba4ec2608b1d$var$gl.createBuffer();\n    $efd3ba4ec2608b1d$var$gl.bindBuffer($efd3ba4ec2608b1d$var$gl.ARRAY_BUFFER, $efd3ba4ec2608b1d$var$buffer);\n    $efd3ba4ec2608b1d$var$gl.enableVertexAttribArray(positionLocation);\n    $efd3ba4ec2608b1d$var$gl.vertexAttribPointer(positionLocation, 2, $efd3ba4ec2608b1d$var$gl.FLOAT, false, 12, 0);\n    $efd3ba4ec2608b1d$var$gl.enableVertexAttribArray(barTypeLocation);\n    $efd3ba4ec2608b1d$var$gl.vertexAttribPointer(barTypeLocation, 1, $efd3ba4ec2608b1d$var$gl.FLOAT, false, 12, 8);\n}\nconst $efd3ba4ec2608b1d$var$startRenderer = ()=>{\n    requestAnimationFrame(()=>$efd3ba4ec2608b1d$var$startRenderer());\n    $efd3ba4ec2608b1d$var$visualizer.render();\n};\nfunction $efd3ba4ec2608b1d$var$createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(\"Error compiling shader:\", gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\nfunction $efd3ba4ec2608b1d$var$createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error(\"Error linking program:\", gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n        return null;\n    }\n    return program;\n}\ndocument.getElementById(\"colorThemeSelect\").addEventListener(\"change\", (event)=>{\n    (0, $d386376756af05a9$export$2e2bcd8739ae039).setTheme(event.target.value);\n});\ndocument.getElementById(\"modeSelect\").addEventListener(\"change\", (event)=>{\n    (0, $a0b14f8ed607a5d3$export$2e2bcd8739ae039).setOption(\"visualizer\", event.target.value);\n});\n\n\n//# sourceMappingURL=index.9222194a.js.map\n","import ColorThemes from './colorThemes.js';\nimport Options from './options.js';\nimport Visualizer from './visualizer.ts';\n\ndocument\n    .getElementById('audioFileInput')\n    .addEventListener('change', handleFileSelect, false);\n\nlet audioContext,\n    analyser,\n    source,\n    bufferLength,\n    canvas,\n    gl,\n    program,\n    buffer,\n    visualizer;\nlet ended = false;\n\nconst RAMP_LENGTH_UP_SECONDS = 0.1;\nconst RAMP_LENGTH_DOWN_SECONDS = 1;\nconst PEAK_RAMP_LENGTH_DOWN_SECONDS = 1;\nconst STEP_EPSILON = 0.0001;\nconst HOLD_DECAY = 0.01;\nconst HOLD_HEIGHT = 0.008;\nconst PEAK_HOLD_DECAY_MS = 1000;\n\nfunction handleFileSelect(event) {\n    const file = event.target.files[0];\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = function (e) {\n            initAudio(e.target.result);\n        };\n        reader.readAsArrayBuffer(file);\n    }\n}\n\nfunction initAudio(audioData) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const FFT_SIZE = 4096;\n    analyser = audioContext.createAnalyser();\n    analyser.fftSize = FFT_SIZE;\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n\n    analyser.minDecibels = -90;\n    analyser.maxDecibels = 0;\n    analyser.smoothingTimeConstant = 0.0;\n\n    audioContext.decodeAudioData(audioData, function (buffer) {\n        source = audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(analyser);\n        source.onended = () => {\n            ended = true;\n        };\n\n        visualizer = new Visualizer(audioContext);\n        visualizer.connectAudio(analyser);\n        analyser.connect(audioContext.destination);\n\n        source.start();\n        // initWebGL();\n\n        startRenderer();\n    });\n}\n\nfunction initWebGL() {\n    canvas = document.getElementById('volumeBarCanvas');\n    gl = canvas.getContext('webgl');\n\n    const vertexShaderSource = `\n        attribute vec2 a_position;\n        attribute float a_barType;\n        varying float v_barType;\n        void main() {\n            gl_Position = vec4(a_position, 0, 1);\n            v_barType = a_barType;\n        }\n    `;\n\n    const fragmentShaderSource = `\n        precision mediump float;\n        uniform float u_volume;\n        uniform float u_rms;\n        uniform float u_hold;\n        varying float v_barType;\n        void main() {\n            if (v_barType == 0.0) {\n                gl_FragColor = vec4(0.384, 0.530, 0.216, 1.0);\n            } else {\n                gl_FragColor = vec4(0.454, 0.98, 0.239, 1.0);\n            }\n        }\n    `;\n\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = createShader(\n        gl,\n        gl.FRAGMENT_SHADER,\n        fragmentShaderSource\n    );\n\n    program = createProgram(gl, vertexShader, fragmentShader);\n    gl.useProgram(program);\n\n    const positionLocation = gl.getAttribLocation(program, 'a_position');\n    const barTypeLocation = gl.getAttribLocation(program, 'a_barType');\n\n    buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 12, 0);\n\n    gl.enableVertexAttribArray(barTypeLocation);\n    gl.vertexAttribPointer(barTypeLocation, 1, gl.FLOAT, false, 12, 8);\n}\n\nconst startRenderer = () => {\n    requestAnimationFrame(() => startRenderer());\n    visualizer.render();\n};\n\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error('Error compiling shader:', gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error('Error linking program:', gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n        return null;\n    }\n    return program;\n}\n\ndocument\n    .getElementById('colorThemeSelect')\n    .addEventListener('change', (event) => {\n        ColorThemes.setTheme(event.target.value);\n    });\n\ndocument\n    .getElementById('modeSelect')\n    .addEventListener('change', (event) => {\n        Options.setOption('visualizer', event.target.value);\n    });","import Options from './options.js';\n\nconst COLOR_THEMES = {\n    foam: {\n        primary: '#abffca',\n        secondary: '#000000',\n    },\n    fire: {\n        primary: '#ff0000',\n        secondary: '#000000',\n    },\n    bubblegum: {\n        primary: '#ffffff',\n        secondary: '#ffa1ee',\n    },\n    galaxy: {\n        primary: '#e8daed',\n        secondary: '#755b7d',\n    },\n};\n\nclass ColorThemes {\n    static getTheme() {\n        return COLOR_THEMES[Options.getOption('theme')];\n    }\n\n    static setTheme(newTheme) {\n        Options.setOption('theme', newTheme);\n        document.documentElement.setAttribute('data-theme', newTheme);\n        document.getElementById('colorThemeSelect').value = newTheme;\n    }\n}\n\nexport default ColorThemes;\n","const setThemeSideEffect = (newTheme) => {\n    document.documentElement.setAttribute('data-theme', newTheme);\n    document.getElementById('colorThemeSelect').value = newTheme;\n};\n\nconst setVisualizerSideEffect = (newVisualizer) => {\n    document.getElementById('modeSelect').value = newVisualizer;\n};\n\nexport default class Options {\n    static init() {\n        this.opts = {\n            theme: 'foam',\n            visualizer: 'line',\n        };\n        this.sideEffects = (key) => {\n            if (key === 'theme') {\n                setThemeSideEffect(this.opts.theme);\n            }\n            if (key === 'visualizer') {\n                setVisualizerSideEffect(this.opts.visualizer);\n            }\n        };\n        for (const key in this.opts) {\n            if (localStorage.getItem(key) != null) {\n                this.opts[key] = localStorage.getItem(key);\n                this.sideEffects(key);\n            }\n        }\n    }\n\n    static getOption(key) {\n        return this.opts[key];\n    }\n\n    static setOption(key, value) {\n        this.opts[key] = value;\n        localStorage.setItem(key, value);\n    }\n}\n\n(() => {\n    Options.init();\n})();\n","import AudioLevels from './audioLevels.js';\nimport AudioProcessor from './audioProcessor.js';\nimport { RENDER_FUNCS } from './renderFuncs.js';\nimport Options from './options.js';\n\nexport default class Visualizer {\n    audio: AudioProcessor;\n    audioLevels: AudioLevels;\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    audioNode: AudioNode | null = null;\n\n    constructor(audioContext: AudioContext) {\n        this.audio = new AudioProcessor(audioContext);\n        this.audioLevels = new AudioLevels(this.audio);\n\n        // Get the canvas element and its context\n        this.canvas = document.getElementById(\n            'volumeBarCanvas'\n        ) as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    }\n\n    render() {\n        this.audio.sampleAudio();\n        this.audioLevels.updateAudioLevels();\n        this.renderWebGL();\n    }\n\n    connectAudio(audioNode: AudioNode) {\n        this.audioNode = audioNode;\n        this.audio.connectAudio(audioNode);\n    }\n\n    disconnectAudio(audioNode: AudioNode) {\n        this.audioNode = null;\n        this.audio.disconnectAudio(audioNode);\n    }\n\n    renderWebGL() {\n        // Clear the canvas\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        const renderFunc = RENDER_FUNCS[Options.getOption('visualizer')];\n        renderFunc(this.audio, this.canvas, this.ctx);\n    }\n}\n","import AudioProcessor from './audioProcessor';\n\nexport default class AudioLevels {\n    audio: AudioProcessor;\n    starts: [number, number, number];\n    stops: [number, number, number];\n    val: Float32Array;\n    imm: Float32Array;\n    att: Float32Array;\n    avg: Float32Array;\n    longAvg: Float32Array;\n\n    constructor(audio: AudioProcessor) {\n        this.audio = audio;\n\n        let sampleRate;\n        if (this.audio.audioContext) {\n            sampleRate = this.audio.audioContext.sampleRate;\n        } else {\n            sampleRate = 44100;\n        }\n\n        const bucketHz = sampleRate / this.audio.fftSize;\n\n        const bassLow = Math.clamp(\n            Math.round(20 / bucketHz) - 1,\n            0,\n            this.audio.numSamps - 1\n        );\n        const bassHigh = Math.clamp(\n            Math.round(320 / bucketHz) - 1,\n            0,\n            this.audio.numSamps - 1\n        );\n        const midHigh = Math.clamp(\n            Math.round(2800 / bucketHz) - 1,\n            0,\n            this.audio.numSamps - 1\n        );\n        const trebHigh = Math.clamp(\n            Math.round(11025 / bucketHz) - 1,\n            0,\n            this.audio.numSamps - 1\n        );\n\n        this.starts = [bassLow, bassHigh, midHigh];\n        this.stops = [bassHigh, midHigh, trebHigh];\n\n        this.val = new Float32Array(3);\n        this.imm = new Float32Array(3);\n        this.att = new Float32Array(3);\n        this.avg = new Float32Array(3);\n        this.longAvg = new Float32Array(3);\n\n        this.att.fill(1);\n        this.avg.fill(1);\n        this.longAvg.fill(1);\n    }\n\n    /* eslint-disable camelcase */\n    get bass() {\n        return this.val[0];\n    }\n\n    get bass_att() {\n        return this.att[0];\n    }\n\n    get mid() {\n        return this.val[1];\n    }\n\n    get mid_att() {\n        return this.att[1];\n    }\n\n    get treb() {\n        return this.val[2];\n    }\n\n    get treb_att() {\n        return this.att[2];\n    }\n    /* eslint-enable camelcase */\n\n    static isFiniteNumber(num: number) {\n        return Number.isFinite(num) && !Number.isNaN(num);\n    }\n\n    // static adjustRateToFPS(rate, baseFPS, FPS) {\n    //     return rate ** (baseFPS / FPS);\n    // }\n\n    updateAudioLevels() {\n        if (this.audio.freqArray.length > 0) {\n            // let effectiveFPS = fps;\n            // if (\n            //     !AudioLevels.isFiniteNumber(effectiveFPS) ||\n            //     effectiveFPS < 15\n            // ) {\n            //     effectiveFPS = 15;\n            // } else if (effectiveFPS > 144) {\n            //     effectiveFPS = 144;\n            // }\n\n            // Clear for next loop\n            this.imm.fill(0);\n            for (let i = 0; i < 3; i++) {\n                for (let j = this.starts[i]; j < this.stops[i]; j++) {\n                    this.imm[i] += this.audio.freqArray[j];\n                }\n            }\n\n            for (let i = 0; i < 3; i++) {\n                let rate;\n                if (this.imm[i] > this.avg[i]) {\n                    rate = 0.2;\n                } else {\n                    rate = 0.5;\n                }\n                // rate = AudioLevels.adjustRateToFPS(rate, 30.0, effectiveFPS);\n                this.avg[i] = this.avg[i] * rate + this.imm[i] * (1 - rate);\n\n                // if (frame < 50) {\n                //     rate = 0.9;\n                // } else {\n                rate = 0.992;\n                // }\n                // rate = AudioLevels.adjustRateToFPS(rate, 30.0, effectiveFPS);\n                this.longAvg[i] =\n                    this.longAvg[i] * rate + this.imm[i] * (1 - rate);\n\n                if (this.longAvg[i] < 0.001) {\n                    this.val[i] = 1.0;\n                    this.att[i] = 1.0;\n                } else {\n                    this.val[i] = this.imm[i] / this.longAvg[i];\n                    this.att[i] = this.avg[i] / this.longAvg[i];\n                }\n            }\n        }\n    }\n}\n","import FFT from './fft.js';\n\nexport default class AudioProcessor {\n    numSamps: number;\n    fftSize: number;\n    fft: FFT;\n    audioContext: AudioContext;\n    audible: DelayNode;\n    analyser: AnalyserNode;\n    analyserL: AnalyserNode;\n    analyserR: AnalyserNode;\n    splitter: ChannelSplitterNode;\n    timeByteArray: Uint8Array;\n    timeByteArrayL: Uint8Array;\n    timeByteArrayR: Uint8Array;\n    timeArray: Int8Array;\n    timeByteArraySignedL: Int8Array;\n    timeByteArraySignedR: Int8Array;\n    tempTimeArrayL: Int8Array;\n    tempTimeArrayR: Int8Array;\n    timeArrayL: Int8Array;\n    timeArrayR: Int8Array;\n    freqArray: Float32Array;\n    freqArrayL: Float32Array;\n    freqArrayR: Float32Array;\n\n    constructor(context: AudioContext) {\n        this.numSamps = 512;\n        this.fftSize = this.numSamps * 2;\n\n        this.fft = new FFT(this.fftSize, 512, true);\n\n        this.audioContext = context;\n        this.audible = context.createDelay();\n\n        this.analyser = context.createAnalyser();\n        this.analyser.smoothingTimeConstant = 0.0;\n        this.analyser.fftSize = this.fftSize;\n\n        this.audible.connect(this.analyser);\n\n        // Split channels\n        this.analyserL = context.createAnalyser();\n        this.analyserL.smoothingTimeConstant = 0.0;\n        this.analyserL.fftSize = this.fftSize;\n\n        this.analyserR = context.createAnalyser();\n        this.analyserR.smoothingTimeConstant = 0.0;\n        this.analyserR.fftSize = this.fftSize;\n\n        this.splitter = context.createChannelSplitter(2);\n\n        this.audible.connect(this.splitter);\n        this.splitter.connect(this.analyserL, 0);\n        this.splitter.connect(this.analyserR, 1);\n\n        // Initialised once as typed arrays\n        // Used for webaudio API raw (time domain) samples. 0 -> 255\n        this.timeByteArray = new Uint8Array(this.fftSize);\n        this.timeByteArrayL = new Uint8Array(this.fftSize);\n        this.timeByteArrayR = new Uint8Array(this.fftSize);\n\n        // Signed raw samples shifted to -128 -> 127\n        this.timeArray = new Int8Array(this.fftSize);\n        this.timeByteArraySignedL = new Int8Array(this.fftSize);\n        this.timeByteArraySignedR = new Int8Array(this.fftSize);\n\n        // Temporary array for smoothing\n        this.tempTimeArrayL = new Int8Array(this.fftSize);\n        this.tempTimeArrayR = new Int8Array(this.fftSize);\n\n        // Undersampled from this.fftSize to this.numSamps\n        this.timeArrayL = new Int8Array(this.numSamps);\n        this.timeArrayR = new Int8Array(this.numSamps);\n\n        // Frequency domain arrays\n        this.freqArray = new Float32Array(0);\n        this.freqArrayL = new Float32Array(0);\n        this.freqArrayR = new Float32Array(0);\n    }\n\n    sampleAudio() {\n        this.analyser.getByteTimeDomainData(this.timeByteArray);\n        this.analyserL.getByteTimeDomainData(this.timeByteArrayL);\n        this.analyserR.getByteTimeDomainData(this.timeByteArrayR);\n        this.processAudio();\n    }\n\n    updateAudio(\n        timeByteArray: Uint8Array,\n        timeByteArrayL: Uint8Array,\n        timeByteArrayR: Uint8Array\n    ) {\n        this.timeByteArray.set(timeByteArray);\n        this.timeByteArrayL.set(timeByteArrayL);\n        this.timeByteArrayR.set(timeByteArrayR);\n        this.processAudio();\n    }\n    /* eslint-disable no-bitwise */\n    processAudio() {\n        for (let i = 0, j = 0, lastIdx = 0; i < this.fftSize; i++) {\n            // Shift Unsigned to Signed about 0\n            this.timeArray[i] = this.timeByteArray[i] - 128;\n            this.timeByteArraySignedL[i] = this.timeByteArrayL[i] - 128;\n            this.timeByteArraySignedR[i] = this.timeByteArrayR[i] - 128;\n\n            this.tempTimeArrayL[i] =\n                0.5 *\n                (this.timeByteArraySignedL[i] +\n                    this.timeByteArraySignedL[lastIdx]);\n            this.tempTimeArrayR[i] =\n                0.5 *\n                (this.timeByteArraySignedR[i] +\n                    this.timeByteArraySignedR[lastIdx]);\n\n            // Undersampled\n            if (i % 2 === 0) {\n                this.timeArrayL[j] = this.tempTimeArrayL[i];\n                this.timeArrayR[j] = this.tempTimeArrayR[i];\n                j += 1;\n            }\n\n            lastIdx = i;\n        }\n\n        // Use full width samples for the FFT\n        this.freqArray = this.fft.timeToFrequencyDomain(this.timeArray);\n        this.freqArrayL = this.fft.timeToFrequencyDomain(\n            this.timeByteArraySignedL\n        );\n        this.freqArrayR = this.fft.timeToFrequencyDomain(\n            this.timeByteArraySignedR\n        );\n    }\n\n    connectAudio(audioNode: AudioNode) {\n        audioNode.connect(this.audible);\n    }\n\n    disconnectAudio(audioNode: AudioNode) {\n        audioNode.disconnect(this.audible);\n    }\n    /* eslint-enable no-bitwise */\n}\n","export default class FFT {\n    samplesIn: number;\n    samplesOut: number;\n    equalize: boolean;\n    NFREQ: number;\n    equalizeArr: Float32Array | null = null;\n    bitrevtable: Uint16Array;\n    cossintable: Float32Array[];\n\n    constructor(samplesIn: number, samplesOut: number, equalize = false) {\n        this.samplesIn = samplesIn;\n        this.samplesOut = samplesOut;\n        this.equalize = equalize;\n        this.NFREQ = samplesOut * 2;\n\n        if (this.equalize) {\n            this.initEqualizeTable();\n        }\n        this.bitrevtable = new Uint16Array(this.NFREQ);\n        this.cossintable = [new Float32Array(0), new Float32Array(0)];\n        this.initBitRevTable();\n        this.initCosSinTable();\n    }\n\n    initEqualizeTable() {\n        this.equalizeArr = new Float32Array(this.samplesOut);\n        const invHalfNFREQ = 1.0 / this.samplesOut;\n        for (let i = 0; i < this.samplesOut; i++) {\n            this.equalizeArr[i] =\n                -0.02 * Math.log((this.samplesOut - i) * invHalfNFREQ);\n        }\n    }\n\n    /* eslint-disable no-bitwise */\n    initBitRevTable() {\n        for (let i = 0; i < this.NFREQ; i++) {\n            this.bitrevtable[i] = i;\n        }\n\n        let j = 0;\n        for (let i = 0; i < this.NFREQ; i++) {\n            if (j > i) {\n                const temp = this.bitrevtable[i];\n                this.bitrevtable[i] = this.bitrevtable[j];\n                this.bitrevtable[j] = temp;\n            }\n\n            let m = this.NFREQ >> 1;\n\n            while (m >= 1 && j >= m) {\n                j -= m;\n                m >>= 1;\n            }\n\n            j += m;\n        }\n    }\n\n    initCosSinTable() {\n        let dftsize = 2;\n        let tabsize = 0;\n        while (dftsize <= this.NFREQ) {\n            tabsize += 1;\n            dftsize <<= 1;\n        }\n\n        this.cossintable = [\n            new Float32Array(tabsize),\n            new Float32Array(tabsize),\n        ];\n\n        dftsize = 2;\n        let i = 0;\n        while (dftsize <= this.NFREQ) {\n            const theta = (-2.0 * Math.PI) / dftsize;\n            this.cossintable[0][i] = Math.cos(theta);\n            this.cossintable[1][i] = Math.sin(theta);\n            i += 1;\n            dftsize <<= 1;\n        }\n    }\n\n    timeToFrequencyDomain(waveDataIn: Int8Array) {\n        const real = new Float32Array(this.NFREQ);\n        const imag = new Float32Array(this.NFREQ);\n\n        for (let i = 0; i < this.NFREQ; i++) {\n            const idx = this.bitrevtable[i];\n            if (idx < this.samplesIn) {\n                real[i] = waveDataIn[idx];\n            } else {\n                real[i] = 0;\n            }\n            imag[i] = 0;\n        }\n\n        let dftsize = 2;\n        let t = 0;\n        while (dftsize <= this.NFREQ) {\n            const wpr = this.cossintable[0][t];\n            const wpi = this.cossintable[1][t];\n            let wr = 1.0;\n            let wi = 0.0;\n            const hdftsize = dftsize >> 1;\n\n            for (let m = 0; m < hdftsize; m++) {\n                for (let i = m; i < this.NFREQ; i += dftsize) {\n                    const j = i + hdftsize;\n                    const tempr = wr * real[j] - wi * imag[j];\n                    const tempi = wr * imag[j] + wi * real[j];\n                    real[j] = real[i] - tempr;\n                    imag[j] = imag[i] - tempi;\n                    real[i] += tempr;\n                    imag[i] += tempi;\n                }\n\n                const wtemp = wr;\n                wr = wtemp * wpr - wi * wpi;\n                wi = wi * wpr + wtemp * wpi;\n            }\n\n            dftsize <<= 1;\n            t += 1;\n        }\n\n        const spectralDataOut = new Float32Array(this.samplesOut);\n        if (this.equalize && this.equalizeArr != null) {\n            for (let i = 0; i < this.samplesOut; i++) {\n                spectralDataOut[i] =\n                    this.equalizeArr[i] *\n                    Math.sqrt(real[i] * real[i] + imag[i] * imag[i]);\n            }\n        } else {\n            for (let i = 0; i < this.samplesOut; i++) {\n                spectralDataOut[i] = Math.sqrt(\n                    real[i] * real[i] + imag[i] * imag[i]\n                );\n            }\n        }\n\n        return spectralDataOut;\n    }\n    /* eslint-enable no-bitwise */\n}\n","import ColorThemes from './colorThemes.js';\n\nexport const RENDER_FUNCS = {\n    bars: (audio, canvas, ctx) => {\n        const data = audio.freqArrayL;\n        const canvasWidth = canvas.width;\n        const canvasHeight = canvas.height;\n        const numBars = data.length;\n\n        // Calculate logarithmic positions for each bar\n        let totalLog = 0;\n        const logWidths = [];\n\n        let cumulativeWidth = 0;\n\n        for (let i = 0; i < numBars; i++) {\n            if (i === 0) {\n                logWidths.push(1);\n                totalLog += 1;\n            } else {\n                const logWidth = Math.log10(i + 1) - Math.log10(i);\n                logWidths.push(logWidth);\n                totalLog += logWidth;\n            }\n        }\n\n        // Draw each bar with logarithmically adjusted widths\n        for (let i = 0; i < numBars; i++) {\n            const logWidth = (logWidths[i] / totalLog) * canvasWidth;\n\n            const barHeight = (data[i] * canvasHeight) / 20;\n            ctx.fillStyle = ColorThemes.getTheme().primary;\n            ctx.fillRect(\n                cumulativeWidth,\n                canvasHeight - barHeight,\n                logWidth,\n                barHeight\n            );\n            cumulativeWidth += logWidth;\n        }\n    },\n    line: (audio, canvas, ctx) => {\n        const data = audio.freqArray.map((val) => {\n            return Math.log10(val + 1);\n        });\n        const canvasWidth = canvas.width;\n        const canvasHeight = canvas.height;\n        const numBars = data.length;\n\n\n        // Clear the canvas\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n        // Calculate logarithmic positions for each bar\n        let totalLog = 0;\n        const logWidths = [];\n\n        for (let i = 0; i < numBars; i++) {\n            if (i === 0) {\n                logWidths.push(1);\n                totalLog += 1;\n            } else {\n                const logWidth = Math.log10(i + 1) - Math.log10(i);\n                logWidths.push(logWidth);\n                totalLog += logWidth;\n            }\n        }\n        let cumulativeWidth = 0;\n\n        ctx.beginPath();\n        for (let i = 0; i < numBars; i++) {\n            const logWidth = (logWidths[i] / totalLog) * canvasWidth;\n\n            const x = cumulativeWidth + logWidth / 2;\n            const y = canvasHeight - (data[i] * canvasHeight) / 2;\n\n            if (i === 0) {\n                ctx.moveTo(x, y);\n            } else {\n                ctx.lineTo(x, y);\n            }\n\n            cumulativeWidth += logWidth;\n        }\n        ctx.strokeStyle = ColorThemes.getTheme().primary;\n        ctx.lineWidth = 2;\n        ctx.stroke();\n    },\n};\n"],"names":["$efd3ba4ec2608b1d$var$audioContext","$efd3ba4ec2608b1d$var$analyser","$efd3ba4ec2608b1d$var$source","$efd3ba4ec2608b1d$var$visualizer","$a0b14f8ed607a5d3$var$setThemeSideEffect","newTheme","document","documentElement","setAttribute","getElementById","value","$a0b14f8ed607a5d3$var$setVisualizerSideEffect","newVisualizer","$a0b14f8ed607a5d3$export$2e2bcd8739ae039","init","key","opts","theme","visualizer","sideEffects","localStorage","getItem","getOption","setOption","setItem","$d386376756af05a9$var$COLOR_THEMES","foam","primary","secondary","fire","bubblegum","galaxy","$d386376756af05a9$export$2e2bcd8739ae039","getTheme","setTheme","$cdedeb5c34a2f031$export$2e2bcd8739ae039","constructor","audio","bucketHz","sampleRate","audioContext","fftSize","bassLow","Math","clamp","round","numSamps","bassHigh","midHigh","trebHigh","starts","stops","val","Float32Array","imm","att","avg","longAvg","fill","bass","bass_att","mid","mid_att","treb","treb_att","isFiniteNumber","num","Number","isFinite","isNaN","updateAudioLevels","freqArray","length","i","j","rate","$2485b1ca739b5b31$export$2e2bcd8739ae039","samplesIn","samplesOut","equalize","equalizeArr","NFREQ","initEqualizeTable","bitrevtable","Uint16Array","cossintable","initBitRevTable","initCosSinTable","invHalfNFREQ","log","temp","m","dftsize","tabsize","theta","PI","cos","sin","timeToFrequencyDomain","waveDataIn","real","imag","idx","t","wpr","wpi","wr","wi","hdftsize","tempr","tempi","wtemp","spectralDataOut","sqrt","$d024f79b4df505bb$export$2e2bcd8739ae039","context","fft","audible","createDelay","analyser","createAnalyser","smoothingTimeConstant","connect","analyserL","analyserR","splitter","createChannelSplitter","timeByteArray","Uint8Array","timeByteArrayL","timeByteArrayR","timeArray","Int8Array","timeByteArraySignedL","timeByteArraySignedR","tempTimeArrayL","tempTimeArrayR","timeArrayL","timeArrayR","freqArrayL","freqArrayR","sampleAudio","getByteTimeDomainData","processAudio","updateAudio","set","lastIdx","connectAudio","audioNode","disconnectAudio","disconnect","$586b4cff3053a98e$export$b8e290f5e3570bd8","bars","canvas","ctx","data","canvasWidth","width","canvasHeight","height","numBars","totalLog","logWidths","cumulativeWidth","push","logWidth","log10","barHeight","fillStyle","fillRect","line","map","clearRect","beginPath","x","y","moveTo","lineTo","strokeStyle","lineWidth","stroke","$5c86a12c98a1c270$export$2e2bcd8739ae039","audioLevels","getContext","render","renderWebGL","renderFunc","addEventListener","event","file","target","files","reader","FileReader","onload","e","audioData","result","window","AudioContext","webkitAudioContext","dataArray","frequencyBinCount","minDecibels","maxDecibels","decodeAudioData","buffer","createBufferSource","onended","destination","start","$efd3ba4ec2608b1d$var$startRenderer","readAsArrayBuffer","requestAnimationFrame"],"version":3,"file":"index.9222194a.js.map"}